;buildInfoPackage: chisel3, version: 3.1.7, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-03-20 22:15:13.399, builtAtMillis: 1553120113399
circuit TestAccel2 : 
  extmodule VTASimDPI : 
    output dpi_wait : UInt<1>
    input reset : UInt<1>
    input clock : Clock
    
    defname = VTASimDPI
    
    
  module VTASim : 
    input clock : Clock
    input reset : UInt<1>
    output sim_wait : UInt<1>
    
    inst sim of VTASimDPI @[SimShell.scala 74:19]
    sim.dpi_wait is invalid
    sim.reset is invalid
    sim.clock is invalid
    sim.reset <= reset @[SimShell.scala 75:16]
    sim.clock <= clock @[SimShell.scala 76:16]
    sim_wait <= sim.dpi_wait @[SimShell.scala 77:12]
    
  extmodule VTAHostDPI : 
    output dpi : {req : {valid : UInt<1>, opcode : UInt<1>, addr : UInt<8>, value : UInt<32>, flip deq : UInt<1>}, flip resp : {valid : UInt<1>, bits : UInt<32>}}
    input reset : UInt<1>
    input clock : Clock
    
    defname = VTAHostDPI
    
    
  module VTAHostDPIToAXI : 
    input clock : Clock
    input reset : UInt<1>
    output io : {dpi : {req : {flip valid : UInt<1>, flip opcode : UInt<1>, flip addr : UInt<8>, flip value : UInt<32>, deq : UInt<1>}, resp : {valid : UInt<1>, bits : UInt<32>}}, axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<16>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<16>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}}
    
    wire _T_64 : UInt<8> @[VTAHostDPI.scala 87:34]
    _T_64 <= UInt<1>("h00") @[VTAHostDPI.scala 87:34]
    reg addr : UInt, clock with : (reset => (reset, _T_64)) @[VTAHostDPI.scala 87:21]
    wire _T_69 : UInt<32> @[VTAHostDPI.scala 88:34]
    _T_69 <= UInt<1>("h00") @[VTAHostDPI.scala 88:34]
    reg data : UInt, clock with : (reset => (reset, _T_69)) @[VTAHostDPI.scala 88:21]
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[VTAHostDPI.scala 90:22]
    node _T_72 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_72 : @[Conditional.scala 40:58]
      when io.dpi.req.valid : @[VTAHostDPI.scala 94:31]
        when io.dpi.req.opcode : @[VTAHostDPI.scala 95:34]
          state <= UInt<3>("h03") @[VTAHostDPI.scala 96:17]
          skip @[VTAHostDPI.scala 95:34]
        else : @[VTAHostDPI.scala 97:22]
          state <= UInt<3>("h01") @[VTAHostDPI.scala 98:17]
          skip @[VTAHostDPI.scala 97:22]
        skip @[VTAHostDPI.scala 94:31]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_73 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_73 : @[Conditional.scala 39:67]
        when io.axi.ar.ready : @[VTAHostDPI.scala 103:30]
          state <= UInt<3>("h02") @[VTAHostDPI.scala 104:15]
          skip @[VTAHostDPI.scala 103:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_74 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_74 : @[Conditional.scala 39:67]
          when io.axi.r.valid : @[VTAHostDPI.scala 108:29]
            state <= UInt<3>("h00") @[VTAHostDPI.scala 109:15]
            skip @[VTAHostDPI.scala 108:29]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_75 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_75 : @[Conditional.scala 39:67]
            when io.axi.aw.ready : @[VTAHostDPI.scala 113:30]
              state <= UInt<3>("h04") @[VTAHostDPI.scala 114:15]
              skip @[VTAHostDPI.scala 113:30]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_76 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_76 : @[Conditional.scala 39:67]
              when io.axi.w.ready : @[VTAHostDPI.scala 118:29]
                state <= UInt<3>("h05") @[VTAHostDPI.scala 119:15]
                skip @[VTAHostDPI.scala 118:29]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_77 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_77 : @[Conditional.scala 39:67]
                when io.axi.b.valid : @[VTAHostDPI.scala 123:29]
                  state <= UInt<3>("h00") @[VTAHostDPI.scala 124:15]
                  skip @[VTAHostDPI.scala 123:29]
                skip @[Conditional.scala 39:67]
    node _T_78 = eq(state, UInt<3>("h00")) @[VTAHostDPI.scala 129:15]
    node _T_79 = and(_T_78, io.dpi.req.valid) @[VTAHostDPI.scala 129:25]
    when _T_79 : @[VTAHostDPI.scala 129:46]
      addr <= io.dpi.req.addr @[VTAHostDPI.scala 130:10]
      data <= io.dpi.req.value @[VTAHostDPI.scala 131:10]
      skip @[VTAHostDPI.scala 129:46]
    node _T_80 = eq(state, UInt<3>("h03")) @[VTAHostDPI.scala 134:28]
    io.axi.aw.valid <= _T_80 @[VTAHostDPI.scala 134:19]
    io.axi.aw.bits.addr <= addr @[VTAHostDPI.scala 135:23]
    node _T_81 = eq(state, UInt<3>("h04")) @[VTAHostDPI.scala 136:27]
    io.axi.w.valid <= _T_81 @[VTAHostDPI.scala 136:18]
    io.axi.w.bits.data <= data @[VTAHostDPI.scala 137:22]
    io.axi.w.bits.strb <= UInt<4>("h0f") @[VTAHostDPI.scala 138:22]
    node _T_83 = eq(state, UInt<3>("h05")) @[VTAHostDPI.scala 139:27]
    io.axi.b.ready <= _T_83 @[VTAHostDPI.scala 139:18]
    node _T_84 = eq(state, UInt<3>("h01")) @[VTAHostDPI.scala 141:28]
    io.axi.ar.valid <= _T_84 @[VTAHostDPI.scala 141:19]
    io.axi.ar.bits.addr <= addr @[VTAHostDPI.scala 142:23]
    node _T_85 = eq(state, UInt<3>("h02")) @[VTAHostDPI.scala 143:27]
    io.axi.r.ready <= _T_85 @[VTAHostDPI.scala 143:18]
    node _T_86 = eq(state, UInt<3>("h01")) @[VTAHostDPI.scala 145:28]
    node _T_87 = and(_T_86, io.axi.ar.ready) @[VTAHostDPI.scala 145:45]
    node _T_88 = eq(state, UInt<3>("h03")) @[VTAHostDPI.scala 145:73]
    node _T_89 = and(_T_88, io.axi.aw.ready) @[VTAHostDPI.scala 145:91]
    node _T_90 = or(_T_87, _T_89) @[VTAHostDPI.scala 145:64]
    io.dpi.req.deq <= _T_90 @[VTAHostDPI.scala 145:18]
    io.dpi.resp.valid <= io.axi.r.valid @[VTAHostDPI.scala 146:21]
    io.dpi.resp.bits <= io.axi.r.bits.data @[VTAHostDPI.scala 147:20]
    
  module VTAHost : 
    input clock : Clock
    input reset : UInt<1>
    output io : {axi : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<16>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<16>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}}
    
    inst host_dpi of VTAHostDPI @[SimShell.scala 39:24]
    host_dpi.dpi is invalid
    host_dpi.reset is invalid
    host_dpi.clock is invalid
    inst host_axi of VTAHostDPIToAXI @[SimShell.scala 40:24]
    host_axi.clock <= clock
    host_axi.reset <= reset
    host_dpi.reset <= reset @[SimShell.scala 41:21]
    host_dpi.clock <= clock @[SimShell.scala 42:21]
    host_dpi.dpi.resp.bits <= host_axi.io.dpi.resp.bits @[SimShell.scala 43:19]
    host_dpi.dpi.resp.valid <= host_axi.io.dpi.resp.valid @[SimShell.scala 43:19]
    host_dpi.dpi.req.deq <= host_axi.io.dpi.req.deq @[SimShell.scala 43:19]
    host_axi.io.dpi.req.value <= host_dpi.dpi.req.value @[SimShell.scala 43:19]
    host_axi.io.dpi.req.addr <= host_dpi.dpi.req.addr @[SimShell.scala 43:19]
    host_axi.io.dpi.req.opcode <= host_dpi.dpi.req.opcode @[SimShell.scala 43:19]
    host_axi.io.dpi.req.valid <= host_dpi.dpi.req.valid @[SimShell.scala 43:19]
    host_axi.io.axi.r.bits.resp <= io.axi.r.bits.resp @[SimShell.scala 44:10]
    host_axi.io.axi.r.bits.data <= io.axi.r.bits.data @[SimShell.scala 44:10]
    host_axi.io.axi.r.valid <= io.axi.r.valid @[SimShell.scala 44:10]
    io.axi.r.ready <= host_axi.io.axi.r.ready @[SimShell.scala 44:10]
    io.axi.ar.bits.addr <= host_axi.io.axi.ar.bits.addr @[SimShell.scala 44:10]
    io.axi.ar.valid <= host_axi.io.axi.ar.valid @[SimShell.scala 44:10]
    host_axi.io.axi.ar.ready <= io.axi.ar.ready @[SimShell.scala 44:10]
    host_axi.io.axi.b.bits.resp <= io.axi.b.bits.resp @[SimShell.scala 44:10]
    host_axi.io.axi.b.valid <= io.axi.b.valid @[SimShell.scala 44:10]
    io.axi.b.ready <= host_axi.io.axi.b.ready @[SimShell.scala 44:10]
    io.axi.w.bits.strb <= host_axi.io.axi.w.bits.strb @[SimShell.scala 44:10]
    io.axi.w.bits.data <= host_axi.io.axi.w.bits.data @[SimShell.scala 44:10]
    io.axi.w.valid <= host_axi.io.axi.w.valid @[SimShell.scala 44:10]
    host_axi.io.axi.w.ready <= io.axi.w.ready @[SimShell.scala 44:10]
    io.axi.aw.bits.addr <= host_axi.io.axi.aw.bits.addr @[SimShell.scala 44:10]
    io.axi.aw.valid <= host_axi.io.axi.aw.valid @[SimShell.scala 44:10]
    host_axi.io.axi.aw.ready <= io.axi.aw.ready @[SimShell.scala 44:10]
    
  extmodule VTAMemDPI : 
    output dpi : {req : {flip valid : UInt<1>, flip opcode : UInt<1>, flip len : UInt<8>, flip addr : UInt<64>}, flip wr : {valid : UInt<1>, bits : UInt<64>}, rd : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}
    input reset : UInt<1>
    input clock : Clock
    
    defname = VTAMemDPI
    
    
  module VTAMemDPIToAXI : 
    input clock : Clock
    input reset : UInt<1>
    output io : {dpi : {req : {valid : UInt<1>, opcode : UInt<1>, len : UInt<8>, addr : UInt<64>}, wr : {valid : UInt<1>, bits : UInt<64>}, flip rd : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}, axi : {flip aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, id : UInt<1>, user : UInt<5>, len : UInt<4>, size : UInt<3>, burst : UInt<2>, lock : UInt<2>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>}}, flip w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<1>, user : UInt<5>}}, b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<5>}}, flip ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, id : UInt<1>, user : UInt<5>, len : UInt<4>, size : UInt<3>, burst : UInt<2>, lock : UInt<2>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>}}, r : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<1>, user : UInt<5>}}}}
    
    reg opcode : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[VTAMemDPI.scala 83:23]
    wire _T_82 : UInt<8> @[VTAMemDPI.scala 84:33]
    _T_82 <= UInt<1>("h00") @[VTAMemDPI.scala 84:33]
    reg len : UInt, clock with : (reset => (reset, _T_82)) @[VTAMemDPI.scala 84:20]
    wire _T_87 : UInt<64> @[VTAMemDPI.scala 85:34]
    _T_87 <= UInt<1>("h00") @[VTAMemDPI.scala 85:34]
    reg addr : UInt, clock with : (reset => (reset, _T_87)) @[VTAMemDPI.scala 85:21]
    reg state : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[VTAMemDPI.scala 87:22]
    node _T_90 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
    when _T_90 : @[Conditional.scala 40:58]
      when io.axi.ar.valid : @[VTAMemDPI.scala 91:30]
        state <= UInt<3>("h01") @[VTAMemDPI.scala 92:15]
        skip @[VTAMemDPI.scala 91:30]
      else : @[VTAMemDPI.scala 93:37]
        when io.axi.aw.valid : @[VTAMemDPI.scala 93:37]
          state <= UInt<3>("h03") @[VTAMemDPI.scala 94:15]
          skip @[VTAMemDPI.scala 93:37]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_91 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
      when _T_91 : @[Conditional.scala 39:67]
        when io.axi.ar.valid : @[VTAMemDPI.scala 98:30]
          state <= UInt<3>("h02") @[VTAMemDPI.scala 99:15]
          skip @[VTAMemDPI.scala 98:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_92 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
        when _T_92 : @[Conditional.scala 39:67]
          node _T_93 = and(io.axi.r.ready, io.dpi.rd.valid) @[VTAMemDPI.scala 103:28]
          node _T_95 = eq(len, UInt<1>("h00")) @[VTAMemDPI.scala 103:54]
          node _T_96 = and(_T_93, _T_95) @[VTAMemDPI.scala 103:47]
          when _T_96 : @[VTAMemDPI.scala 103:63]
            state <= UInt<3>("h00") @[VTAMemDPI.scala 104:15]
            skip @[VTAMemDPI.scala 103:63]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_97 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
          when _T_97 : @[Conditional.scala 39:67]
            when io.axi.aw.valid : @[VTAMemDPI.scala 108:30]
              state <= UInt<3>("h04") @[VTAMemDPI.scala 109:15]
              skip @[VTAMemDPI.scala 108:30]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_98 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
            when _T_98 : @[Conditional.scala 39:67]
              node _T_99 = and(io.axi.w.valid, io.axi.w.bits.last) @[VTAMemDPI.scala 113:28]
              when _T_99 : @[VTAMemDPI.scala 113:51]
                state <= UInt<3>("h05") @[VTAMemDPI.scala 114:15]
                skip @[VTAMemDPI.scala 113:51]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_100 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
              when _T_100 : @[Conditional.scala 39:67]
                when io.axi.b.ready : @[VTAMemDPI.scala 118:29]
                  state <= UInt<3>("h00") @[VTAMemDPI.scala 119:15]
                  skip @[VTAMemDPI.scala 118:29]
                skip @[Conditional.scala 39:67]
    node _T_101 = eq(state, UInt<3>("h00")) @[VTAMemDPI.scala 124:15]
    when _T_101 : @[VTAMemDPI.scala 124:26]
      when io.axi.ar.valid : @[VTAMemDPI.scala 125:28]
        opcode <= UInt<1>("h00") @[VTAMemDPI.scala 126:14]
        len <= io.axi.ar.bits.len @[VTAMemDPI.scala 127:11]
        addr <= io.axi.ar.bits.addr @[VTAMemDPI.scala 128:12]
        skip @[VTAMemDPI.scala 125:28]
      else : @[VTAMemDPI.scala 129:35]
        when io.axi.aw.valid : @[VTAMemDPI.scala 129:35]
          opcode <= UInt<1>("h01") @[VTAMemDPI.scala 130:14]
          len <= io.axi.aw.bits.len @[VTAMemDPI.scala 131:11]
          addr <= io.axi.aw.bits.addr @[VTAMemDPI.scala 132:12]
          skip @[VTAMemDPI.scala 129:35]
      skip @[VTAMemDPI.scala 124:26]
    else : @[VTAMemDPI.scala 134:37]
      node _T_104 = eq(state, UInt<3>("h02")) @[VTAMemDPI.scala 134:22]
      when _T_104 : @[VTAMemDPI.scala 134:37]
        node _T_105 = and(io.axi.r.ready, io.dpi.rd.valid) @[VTAMemDPI.scala 135:26]
        node _T_107 = neq(len, UInt<1>("h00")) @[VTAMemDPI.scala 135:52]
        node _T_108 = and(_T_105, _T_107) @[VTAMemDPI.scala 135:45]
        when _T_108 : @[VTAMemDPI.scala 135:61]
          node _T_110 = sub(len, UInt<1>("h01")) @[VTAMemDPI.scala 136:18]
          node _T_111 = asUInt(_T_110) @[VTAMemDPI.scala 136:18]
          node _T_112 = tail(_T_111, 1) @[VTAMemDPI.scala 136:18]
          len <= _T_112 @[VTAMemDPI.scala 136:11]
          skip @[VTAMemDPI.scala 135:61]
        skip @[VTAMemDPI.scala 134:37]
    node _T_113 = eq(state, UInt<3>("h01")) @[VTAMemDPI.scala 140:30]
    node _T_114 = and(_T_113, io.axi.ar.valid) @[VTAMemDPI.scala 140:47]
    node _T_115 = eq(state, UInt<3>("h03")) @[VTAMemDPI.scala 140:75]
    node _T_116 = and(_T_115, io.axi.aw.valid) @[VTAMemDPI.scala 140:93]
    node _T_117 = or(_T_114, _T_116) @[VTAMemDPI.scala 140:66]
    io.dpi.req.valid <= _T_117 @[VTAMemDPI.scala 140:20]
    io.dpi.req.opcode <= opcode @[VTAMemDPI.scala 141:21]
    io.dpi.req.len <= len @[VTAMemDPI.scala 142:18]
    io.dpi.req.addr <= addr @[VTAMemDPI.scala 143:19]
    node _T_118 = eq(state, UInt<3>("h01")) @[VTAMemDPI.scala 145:28]
    io.axi.ar.ready <= _T_118 @[VTAMemDPI.scala 145:19]
    node _T_119 = eq(state, UInt<3>("h03")) @[VTAMemDPI.scala 146:28]
    io.axi.aw.ready <= _T_119 @[VTAMemDPI.scala 146:19]
    node _T_120 = eq(state, UInt<3>("h02")) @[VTAMemDPI.scala 148:27]
    node _T_121 = and(_T_120, io.dpi.rd.valid) @[VTAMemDPI.scala 148:41]
    io.axi.r.valid <= _T_121 @[VTAMemDPI.scala 148:18]
    io.axi.r.bits.data <= io.dpi.rd.bits @[VTAMemDPI.scala 149:22]
    node _T_123 = eq(len, UInt<1>("h00")) @[VTAMemDPI.scala 150:29]
    io.axi.r.bits.last <= _T_123 @[VTAMemDPI.scala 150:22]
    io.axi.r.bits.resp <= UInt<1>("h00") @[VTAMemDPI.scala 151:22]
    io.axi.r.bits.user <= UInt<1>("h00") @[VTAMemDPI.scala 152:22]
    io.axi.r.bits.id <= UInt<1>("h00") @[VTAMemDPI.scala 153:20]
    node _T_127 = eq(state, UInt<3>("h02")) @[VTAMemDPI.scala 154:28]
    node _T_128 = and(_T_127, io.axi.r.ready) @[VTAMemDPI.scala 154:42]
    io.dpi.rd.ready <= _T_128 @[VTAMemDPI.scala 154:19]
    node _T_129 = eq(state, UInt<3>("h04")) @[VTAMemDPI.scala 156:28]
    node _T_130 = and(_T_129, io.axi.w.valid) @[VTAMemDPI.scala 156:43]
    io.dpi.wr.valid <= _T_130 @[VTAMemDPI.scala 156:19]
    io.dpi.wr.bits <= io.axi.w.bits.data @[VTAMemDPI.scala 157:18]
    node _T_131 = eq(state, UInt<3>("h04")) @[VTAMemDPI.scala 158:27]
    io.axi.w.ready <= _T_131 @[VTAMemDPI.scala 158:18]
    node _T_132 = eq(state, UInt<3>("h05")) @[VTAMemDPI.scala 160:27]
    io.axi.b.valid <= _T_132 @[VTAMemDPI.scala 160:18]
    io.axi.b.bits.resp <= UInt<1>("h00") @[VTAMemDPI.scala 161:22]
    io.axi.b.bits.user <= UInt<1>("h00") @[VTAMemDPI.scala 162:22]
    io.axi.b.bits.id <= UInt<1>("h00") @[VTAMemDPI.scala 163:20]
    
  module VTAMem : 
    input clock : Clock
    input reset : UInt<1>
    output io : {axi : {flip aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, id : UInt<1>, user : UInt<5>, len : UInt<4>, size : UInt<3>, burst : UInt<2>, lock : UInt<2>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>}}, flip w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<1>, user : UInt<5>}}, b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<5>}}, flip ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, id : UInt<1>, user : UInt<5>, len : UInt<4>, size : UInt<3>, burst : UInt<2>, lock : UInt<2>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>}}, r : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<1>, user : UInt<5>}}}}
    
    inst mem_dpi of VTAMemDPI @[SimShell.scala 57:23]
    mem_dpi.dpi is invalid
    mem_dpi.reset is invalid
    mem_dpi.clock is invalid
    inst mem_axi of VTAMemDPIToAXI @[SimShell.scala 58:23]
    mem_axi.clock <= clock
    mem_axi.reset <= reset
    mem_dpi.reset <= reset @[SimShell.scala 59:20]
    mem_dpi.clock <= clock @[SimShell.scala 60:20]
    mem_axi.io.dpi.rd.bits <= mem_dpi.dpi.rd.bits @[SimShell.scala 61:18]
    mem_axi.io.dpi.rd.valid <= mem_dpi.dpi.rd.valid @[SimShell.scala 61:18]
    mem_dpi.dpi.rd.ready <= mem_axi.io.dpi.rd.ready @[SimShell.scala 61:18]
    mem_dpi.dpi.wr.bits <= mem_axi.io.dpi.wr.bits @[SimShell.scala 61:18]
    mem_dpi.dpi.wr.valid <= mem_axi.io.dpi.wr.valid @[SimShell.scala 61:18]
    mem_dpi.dpi.req.addr <= mem_axi.io.dpi.req.addr @[SimShell.scala 61:18]
    mem_dpi.dpi.req.len <= mem_axi.io.dpi.req.len @[SimShell.scala 61:18]
    mem_dpi.dpi.req.opcode <= mem_axi.io.dpi.req.opcode @[SimShell.scala 61:18]
    mem_dpi.dpi.req.valid <= mem_axi.io.dpi.req.valid @[SimShell.scala 61:18]
    io.axi.r.bits.user <= mem_axi.io.axi.r.bits.user @[SimShell.scala 62:18]
    io.axi.r.bits.id <= mem_axi.io.axi.r.bits.id @[SimShell.scala 62:18]
    io.axi.r.bits.last <= mem_axi.io.axi.r.bits.last @[SimShell.scala 62:18]
    io.axi.r.bits.resp <= mem_axi.io.axi.r.bits.resp @[SimShell.scala 62:18]
    io.axi.r.bits.data <= mem_axi.io.axi.r.bits.data @[SimShell.scala 62:18]
    io.axi.r.valid <= mem_axi.io.axi.r.valid @[SimShell.scala 62:18]
    mem_axi.io.axi.r.ready <= io.axi.r.ready @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.region <= io.axi.ar.bits.region @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.qos <= io.axi.ar.bits.qos @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.prot <= io.axi.ar.bits.prot @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.cache <= io.axi.ar.bits.cache @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.lock <= io.axi.ar.bits.lock @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.burst <= io.axi.ar.bits.burst @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.size <= io.axi.ar.bits.size @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.len <= io.axi.ar.bits.len @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.user <= io.axi.ar.bits.user @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.id <= io.axi.ar.bits.id @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.bits.addr <= io.axi.ar.bits.addr @[SimShell.scala 62:18]
    mem_axi.io.axi.ar.valid <= io.axi.ar.valid @[SimShell.scala 62:18]
    io.axi.ar.ready <= mem_axi.io.axi.ar.ready @[SimShell.scala 62:18]
    io.axi.b.bits.user <= mem_axi.io.axi.b.bits.user @[SimShell.scala 62:18]
    io.axi.b.bits.id <= mem_axi.io.axi.b.bits.id @[SimShell.scala 62:18]
    io.axi.b.bits.resp <= mem_axi.io.axi.b.bits.resp @[SimShell.scala 62:18]
    io.axi.b.valid <= mem_axi.io.axi.b.valid @[SimShell.scala 62:18]
    mem_axi.io.axi.b.ready <= io.axi.b.ready @[SimShell.scala 62:18]
    mem_axi.io.axi.w.bits.user <= io.axi.w.bits.user @[SimShell.scala 62:18]
    mem_axi.io.axi.w.bits.id <= io.axi.w.bits.id @[SimShell.scala 62:18]
    mem_axi.io.axi.w.bits.last <= io.axi.w.bits.last @[SimShell.scala 62:18]
    mem_axi.io.axi.w.bits.strb <= io.axi.w.bits.strb @[SimShell.scala 62:18]
    mem_axi.io.axi.w.bits.data <= io.axi.w.bits.data @[SimShell.scala 62:18]
    mem_axi.io.axi.w.valid <= io.axi.w.valid @[SimShell.scala 62:18]
    io.axi.w.ready <= mem_axi.io.axi.w.ready @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.region <= io.axi.aw.bits.region @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.qos <= io.axi.aw.bits.qos @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.prot <= io.axi.aw.bits.prot @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.cache <= io.axi.aw.bits.cache @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.lock <= io.axi.aw.bits.lock @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.burst <= io.axi.aw.bits.burst @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.size <= io.axi.aw.bits.size @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.len <= io.axi.aw.bits.len @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.user <= io.axi.aw.bits.user @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.id <= io.axi.aw.bits.id @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.bits.addr <= io.axi.aw.bits.addr @[SimShell.scala 62:18]
    mem_axi.io.axi.aw.valid <= io.axi.aw.valid @[SimShell.scala 62:18]
    io.axi.aw.ready <= mem_axi.io.axi.aw.ready @[SimShell.scala 62:18]
    
  module AXISimShell : 
    input clock : Clock
    input reset : UInt<1>
    output mem : {flip aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, id : UInt<1>, user : UInt<5>, len : UInt<4>, size : UInt<3>, burst : UInt<2>, lock : UInt<2>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>}}, flip w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<1>, user : UInt<5>}}, b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<5>}}, flip ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, id : UInt<1>, user : UInt<5>, len : UInt<4>, size : UInt<3>, burst : UInt<2>, lock : UInt<2>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>}}, r : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<1>, user : UInt<5>}}}
    output host : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<16>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<16>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}
    input sim_clock : Clock
    output sim_wait : UInt<1>
    
    inst mod_sim of VTASim @[SimShell.scala 90:23]
    mod_sim.clock <= clock
    mod_sim.reset <= reset
    inst mod_host of VTAHost @[SimShell.scala 91:24]
    mod_host.clock <= clock
    mod_host.reset <= reset
    inst mod_mem of VTAMem @[SimShell.scala 92:23]
    mod_mem.clock <= clock
    mod_mem.reset <= reset
    mem.r.bits.user <= mod_mem.io.axi.r.bits.user @[SimShell.scala 93:7]
    mem.r.bits.id <= mod_mem.io.axi.r.bits.id @[SimShell.scala 93:7]
    mem.r.bits.last <= mod_mem.io.axi.r.bits.last @[SimShell.scala 93:7]
    mem.r.bits.resp <= mod_mem.io.axi.r.bits.resp @[SimShell.scala 93:7]
    mem.r.bits.data <= mod_mem.io.axi.r.bits.data @[SimShell.scala 93:7]
    mem.r.valid <= mod_mem.io.axi.r.valid @[SimShell.scala 93:7]
    mod_mem.io.axi.r.ready <= mem.r.ready @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.region <= mem.ar.bits.region @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.qos <= mem.ar.bits.qos @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.prot <= mem.ar.bits.prot @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.cache <= mem.ar.bits.cache @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.lock <= mem.ar.bits.lock @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.burst <= mem.ar.bits.burst @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.size <= mem.ar.bits.size @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.len <= mem.ar.bits.len @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.user <= mem.ar.bits.user @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.id <= mem.ar.bits.id @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.bits.addr <= mem.ar.bits.addr @[SimShell.scala 93:7]
    mod_mem.io.axi.ar.valid <= mem.ar.valid @[SimShell.scala 93:7]
    mem.ar.ready <= mod_mem.io.axi.ar.ready @[SimShell.scala 93:7]
    mem.b.bits.user <= mod_mem.io.axi.b.bits.user @[SimShell.scala 93:7]
    mem.b.bits.id <= mod_mem.io.axi.b.bits.id @[SimShell.scala 93:7]
    mem.b.bits.resp <= mod_mem.io.axi.b.bits.resp @[SimShell.scala 93:7]
    mem.b.valid <= mod_mem.io.axi.b.valid @[SimShell.scala 93:7]
    mod_mem.io.axi.b.ready <= mem.b.ready @[SimShell.scala 93:7]
    mod_mem.io.axi.w.bits.user <= mem.w.bits.user @[SimShell.scala 93:7]
    mod_mem.io.axi.w.bits.id <= mem.w.bits.id @[SimShell.scala 93:7]
    mod_mem.io.axi.w.bits.last <= mem.w.bits.last @[SimShell.scala 93:7]
    mod_mem.io.axi.w.bits.strb <= mem.w.bits.strb @[SimShell.scala 93:7]
    mod_mem.io.axi.w.bits.data <= mem.w.bits.data @[SimShell.scala 93:7]
    mod_mem.io.axi.w.valid <= mem.w.valid @[SimShell.scala 93:7]
    mem.w.ready <= mod_mem.io.axi.w.ready @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.region <= mem.aw.bits.region @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.qos <= mem.aw.bits.qos @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.prot <= mem.aw.bits.prot @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.cache <= mem.aw.bits.cache @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.lock <= mem.aw.bits.lock @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.burst <= mem.aw.bits.burst @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.size <= mem.aw.bits.size @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.len <= mem.aw.bits.len @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.user <= mem.aw.bits.user @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.id <= mem.aw.bits.id @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.bits.addr <= mem.aw.bits.addr @[SimShell.scala 93:7]
    mod_mem.io.axi.aw.valid <= mem.aw.valid @[SimShell.scala 93:7]
    mem.aw.ready <= mod_mem.io.axi.aw.ready @[SimShell.scala 93:7]
    mod_host.io.axi.r.bits.resp <= host.r.bits.resp @[SimShell.scala 94:8]
    mod_host.io.axi.r.bits.data <= host.r.bits.data @[SimShell.scala 94:8]
    mod_host.io.axi.r.valid <= host.r.valid @[SimShell.scala 94:8]
    host.r.ready <= mod_host.io.axi.r.ready @[SimShell.scala 94:8]
    host.ar.bits.addr <= mod_host.io.axi.ar.bits.addr @[SimShell.scala 94:8]
    host.ar.valid <= mod_host.io.axi.ar.valid @[SimShell.scala 94:8]
    mod_host.io.axi.ar.ready <= host.ar.ready @[SimShell.scala 94:8]
    mod_host.io.axi.b.bits.resp <= host.b.bits.resp @[SimShell.scala 94:8]
    mod_host.io.axi.b.valid <= host.b.valid @[SimShell.scala 94:8]
    host.b.ready <= mod_host.io.axi.b.ready @[SimShell.scala 94:8]
    host.w.bits.strb <= mod_host.io.axi.w.bits.strb @[SimShell.scala 94:8]
    host.w.bits.data <= mod_host.io.axi.w.bits.data @[SimShell.scala 94:8]
    host.w.valid <= mod_host.io.axi.w.valid @[SimShell.scala 94:8]
    mod_host.io.axi.w.ready <= host.w.ready @[SimShell.scala 94:8]
    host.aw.bits.addr <= mod_host.io.axi.aw.bits.addr @[SimShell.scala 94:8]
    host.aw.valid <= mod_host.io.axi.aw.valid @[SimShell.scala 94:8]
    mod_host.io.axi.aw.ready <= host.aw.ready @[SimShell.scala 94:8]
    mod_sim.reset <= reset @[SimShell.scala 95:17]
    mod_sim.clock <= sim_clock @[SimShell.scala 96:17]
    sim_wait <= mod_sim.sim_wait @[SimShell.scala 97:12]
    
  module VCR : 
    input clock : Clock
    input reset : UInt<1>
    output io : {host : {flip aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<16>}}, flip w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, flip ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<16>}}, r : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}, vcr : {launch : UInt<1>, flip finish : UInt<1>, flip ecnt : {valid : UInt<1>, bits : UInt<32>}[1], vals : UInt<32>[2], ptrs : UInt<32>[4]}}
    
    reg waddr : UInt<16>, clock with : (reset => (reset, UInt<16>("h0ffff"))) @[VCR.scala 93:22]
    reg wstate : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[VCR.scala 96:23]
    reg rstate : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[VCR.scala 100:23]
    reg rdata : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VCR.scala 101:22]
    reg reg_0 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VCR.scala 107:37]
    reg reg_1 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VCR.scala 107:37]
    reg reg_2 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VCR.scala 107:37]
    reg reg_3 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VCR.scala 107:37]
    reg reg_4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VCR.scala 107:37]
    reg reg_5 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VCR.scala 107:37]
    reg reg_6 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VCR.scala 107:37]
    reg reg_7 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VCR.scala 107:37]
    node _T_135 = eq(UInt<2>("h00"), wstate) @[Conditional.scala 37:30]
    when _T_135 : @[Conditional.scala 40:58]
      when io.host.aw.valid : @[VCR.scala 116:31]
        wstate <= UInt<2>("h01") @[VCR.scala 117:16]
        skip @[VCR.scala 116:31]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_136 = eq(UInt<2>("h01"), wstate) @[Conditional.scala 37:30]
      when _T_136 : @[Conditional.scala 39:67]
        when io.host.w.valid : @[VCR.scala 121:30]
          wstate <= UInt<2>("h02") @[VCR.scala 122:16]
          skip @[VCR.scala 121:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_137 = eq(UInt<2>("h02"), wstate) @[Conditional.scala 37:30]
        when _T_137 : @[Conditional.scala 39:67]
          when io.host.b.ready : @[VCR.scala 126:30]
            wstate <= UInt<2>("h00") @[VCR.scala 127:16]
            skip @[VCR.scala 126:30]
          skip @[Conditional.scala 39:67]
    node _T_138 = and(io.host.aw.ready, io.host.aw.valid) @[Decoupled.scala 37:37]
    when _T_138 : @[VCR.scala 132:28]
      waddr <= io.host.aw.bits.addr @[VCR.scala 132:36]
      skip @[VCR.scala 132:28]
    node _T_139 = eq(wstate, UInt<2>("h00")) @[VCR.scala 134:30]
    io.host.aw.ready <= _T_139 @[VCR.scala 134:20]
    node _T_140 = eq(wstate, UInt<2>("h01")) @[VCR.scala 135:29]
    io.host.w.ready <= _T_140 @[VCR.scala 135:19]
    node _T_141 = eq(wstate, UInt<2>("h02")) @[VCR.scala 136:29]
    io.host.b.valid <= _T_141 @[VCR.scala 136:19]
    io.host.b.bits.resp <= UInt<1>("h00") @[VCR.scala 137:23]
    node _T_143 = eq(UInt<1>("h00"), rstate) @[Conditional.scala 37:30]
    when _T_143 : @[Conditional.scala 40:58]
      when io.host.ar.valid : @[VCR.scala 142:31]
        rstate <= UInt<1>("h01") @[VCR.scala 143:16]
        skip @[VCR.scala 142:31]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_144 = eq(UInt<1>("h01"), rstate) @[Conditional.scala 37:30]
      when _T_144 : @[Conditional.scala 39:67]
        when io.host.r.ready : @[VCR.scala 147:30]
          rstate <= UInt<1>("h00") @[VCR.scala 148:16]
          skip @[VCR.scala 147:30]
        skip @[Conditional.scala 39:67]
    node _T_145 = eq(rstate, UInt<1>("h00")) @[VCR.scala 153:30]
    io.host.ar.ready <= _T_145 @[VCR.scala 153:20]
    node _T_146 = eq(rstate, UInt<1>("h01")) @[VCR.scala 154:29]
    io.host.r.valid <= _T_146 @[VCR.scala 154:19]
    io.host.r.bits.data <= rdata @[VCR.scala 155:23]
    io.host.r.bits.resp <= UInt<1>("h00") @[VCR.scala 156:23]
    when io.vcr.finish : @[VCR.scala 158:24]
      reg_0 <= UInt<2>("h02") @[VCR.scala 159:12]
      skip @[VCR.scala 158:24]
    else : @[VCR.scala 160:57]
      node _T_149 = and(io.host.w.ready, io.host.w.valid) @[Decoupled.scala 37:37]
      node _T_151 = eq(UInt<1>("h00"), waddr) @[VCR.scala 160:46]
      node _T_152 = and(_T_149, _T_151) @[VCR.scala 160:33]
      when _T_152 : @[VCR.scala 160:57]
        reg_0 <= io.host.w.bits.data @[VCR.scala 161:12]
        skip @[VCR.scala 160:57]
    when io.vcr.ecnt[0].valid : @[VCR.scala 165:33]
      reg_1 <= io.vcr.ecnt[0].bits @[VCR.scala 166:19]
      skip @[VCR.scala 165:33]
    else : @[VCR.scala 167:64]
      node _T_153 = and(io.host.w.ready, io.host.w.valid) @[Decoupled.scala 37:37]
      node _T_155 = eq(UInt<3>("h04"), waddr) @[VCR.scala 167:53]
      node _T_156 = and(_T_153, _T_155) @[VCR.scala 167:35]
      when _T_156 : @[VCR.scala 167:64]
        reg_1 <= io.host.w.bits.data @[VCR.scala 168:19]
        skip @[VCR.scala 167:64]
    node _T_157 = and(io.host.w.ready, io.host.w.valid) @[Decoupled.scala 37:37]
    node _T_159 = eq(UInt<4>("h08"), waddr) @[VCR.scala 173:46]
    node _T_160 = and(_T_157, _T_159) @[VCR.scala 173:28]
    when _T_160 : @[VCR.scala 173:57]
      reg_2 <= io.host.w.bits.data @[VCR.scala 174:19]
      skip @[VCR.scala 173:57]
    node _T_161 = and(io.host.w.ready, io.host.w.valid) @[Decoupled.scala 37:37]
    node _T_163 = eq(UInt<4>("h0c"), waddr) @[VCR.scala 173:46]
    node _T_164 = and(_T_161, _T_163) @[VCR.scala 173:28]
    when _T_164 : @[VCR.scala 173:57]
      reg_3 <= io.host.w.bits.data @[VCR.scala 174:19]
      skip @[VCR.scala 173:57]
    node _T_165 = and(io.host.w.ready, io.host.w.valid) @[Decoupled.scala 37:37]
    node _T_167 = eq(UInt<5>("h010"), waddr) @[VCR.scala 173:46]
    node _T_168 = and(_T_165, _T_167) @[VCR.scala 173:28]
    when _T_168 : @[VCR.scala 173:57]
      reg_4 <= io.host.w.bits.data @[VCR.scala 174:19]
      skip @[VCR.scala 173:57]
    node _T_169 = and(io.host.w.ready, io.host.w.valid) @[Decoupled.scala 37:37]
    node _T_171 = eq(UInt<5>("h014"), waddr) @[VCR.scala 173:46]
    node _T_172 = and(_T_169, _T_171) @[VCR.scala 173:28]
    when _T_172 : @[VCR.scala 173:57]
      reg_5 <= io.host.w.bits.data @[VCR.scala 174:19]
      skip @[VCR.scala 173:57]
    node _T_173 = and(io.host.w.ready, io.host.w.valid) @[Decoupled.scala 37:37]
    node _T_175 = eq(UInt<5>("h018"), waddr) @[VCR.scala 173:46]
    node _T_176 = and(_T_173, _T_175) @[VCR.scala 173:28]
    when _T_176 : @[VCR.scala 173:57]
      reg_6 <= io.host.w.bits.data @[VCR.scala 174:19]
      skip @[VCR.scala 173:57]
    node _T_177 = and(io.host.w.ready, io.host.w.valid) @[Decoupled.scala 37:37]
    node _T_179 = eq(UInt<5>("h01c"), waddr) @[VCR.scala 173:46]
    node _T_180 = and(_T_177, _T_179) @[VCR.scala 173:28]
    when _T_180 : @[VCR.scala 173:57]
      reg_7 <= io.host.w.bits.data @[VCR.scala 174:19]
      skip @[VCR.scala 173:57]
    node _T_181 = and(io.host.ar.ready, io.host.ar.valid) @[Decoupled.scala 37:37]
    when _T_181 : @[VCR.scala 178:28]
      node _T_183 = eq(UInt<5>("h01c"), io.host.ar.bits.addr) @[Mux.scala 46:19]
      node _T_184 = mux(_T_183, reg_7, UInt<1>("h00")) @[Mux.scala 46:16]
      node _T_185 = eq(UInt<5>("h018"), io.host.ar.bits.addr) @[Mux.scala 46:19]
      node _T_186 = mux(_T_185, reg_6, _T_184) @[Mux.scala 46:16]
      node _T_187 = eq(UInt<5>("h014"), io.host.ar.bits.addr) @[Mux.scala 46:19]
      node _T_188 = mux(_T_187, reg_5, _T_186) @[Mux.scala 46:16]
      node _T_189 = eq(UInt<5>("h010"), io.host.ar.bits.addr) @[Mux.scala 46:19]
      node _T_190 = mux(_T_189, reg_4, _T_188) @[Mux.scala 46:16]
      node _T_191 = eq(UInt<4>("h0c"), io.host.ar.bits.addr) @[Mux.scala 46:19]
      node _T_192 = mux(_T_191, reg_3, _T_190) @[Mux.scala 46:16]
      node _T_193 = eq(UInt<4>("h08"), io.host.ar.bits.addr) @[Mux.scala 46:19]
      node _T_194 = mux(_T_193, reg_2, _T_192) @[Mux.scala 46:16]
      node _T_195 = eq(UInt<3>("h04"), io.host.ar.bits.addr) @[Mux.scala 46:19]
      node _T_196 = mux(_T_195, reg_1, _T_194) @[Mux.scala 46:16]
      node _T_197 = eq(UInt<1>("h00"), io.host.ar.bits.addr) @[Mux.scala 46:19]
      node _T_198 = mux(_T_197, reg_0, _T_196) @[Mux.scala 46:16]
      rdata <= _T_198 @[VCR.scala 179:11]
      skip @[VCR.scala 178:28]
    node _T_199 = bits(reg_0, 0, 0) @[VCR.scala 182:26]
    io.vcr.launch <= _T_199 @[VCR.scala 182:17]
    io.vcr.vals[0] <= reg_2 @[VCR.scala 185:20]
    io.vcr.vals[1] <= reg_3 @[VCR.scala 185:20]
    io.vcr.ptrs[0] <= reg_4 @[VCR.scala 190:22]
    io.vcr.ptrs[1] <= reg_5 @[VCR.scala 190:22]
    io.vcr.ptrs[2] <= reg_6 @[VCR.scala 190:22]
    io.vcr.ptrs[3] <= reg_7 @[VCR.scala 190:22]
    
  module Arbiter : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<4>}}[1], out : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<4>}}, chosen : UInt<0>}
    
    io.chosen <= UInt<1>("h00") @[Arbiter.scala 123:13]
    io.out.bits.len <= io.in[0].bits.len @[Arbiter.scala 124:15]
    io.out.bits.addr <= io.in[0].bits.addr @[Arbiter.scala 124:15]
    node _T_54 = and(UInt<1>("h01"), io.out.ready) @[Arbiter.scala 134:19]
    io.in[0].ready <= _T_54 @[Arbiter.scala 134:14]
    node _T_56 = eq(UInt<1>("h01"), UInt<1>("h00")) @[Arbiter.scala 135:19]
    node _T_57 = or(_T_56, io.in[0].valid) @[Arbiter.scala 135:31]
    io.out.valid <= _T_57 @[Arbiter.scala 135:16]
    
  module VME : 
    input clock : Clock
    input reset : UInt<1>
    output io : {mem : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, id : UInt<1>, user : UInt<5>, len : UInt<4>, size : UInt<3>, burst : UInt<2>, lock : UInt<2>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<1>, user : UInt<5>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<5>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, id : UInt<1>, user : UInt<5>, len : UInt<4>, size : UInt<3>, burst : UInt<2>, lock : UInt<2>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<1>, user : UInt<5>}}}, vme : {rd : {flip cmd : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<4>}}, data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}}[1], wr : {flip cmd : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, len : UInt<4>}}, flip data : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, ack : UInt<1>}[1]}}
    
    inst rd_arb of Arbiter @[VME.scala 144:22]
    rd_arb.clock <= clock
    rd_arb.reset <= reset
    node _T_188 = and(rd_arb.io.out.ready, rd_arb.io.out.valid) @[Decoupled.scala 37:37]
    reg rd_arb_chosen : UInt<0>, clock @[Reg.scala 11:16]
    when _T_188 : @[Reg.scala 12:19]
      rd_arb_chosen <= rd_arb.io.chosen @[Reg.scala 12:23]
      skip @[Reg.scala 12:19]
    rd_arb.io.in[0].bits.len <= io.vme.rd[0].cmd.bits.len @[VME.scala 147:53]
    rd_arb.io.in[0].bits.addr <= io.vme.rd[0].cmd.bits.addr @[VME.scala 147:53]
    rd_arb.io.in[0].valid <= io.vme.rd[0].cmd.valid @[VME.scala 147:53]
    io.vme.rd[0].cmd.ready <= rd_arb.io.in[0].ready @[VME.scala 147:53]
    reg rstate : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[VME.scala 150:23]
    node _T_191 = eq(UInt<2>("h00"), rstate) @[Conditional.scala 37:30]
    when _T_191 : @[Conditional.scala 40:58]
      when rd_arb.io.out.valid : @[VME.scala 154:34]
        rstate <= UInt<2>("h01") @[VME.scala 155:16]
        skip @[VME.scala 154:34]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_192 = eq(UInt<2>("h01"), rstate) @[Conditional.scala 37:30]
      when _T_192 : @[Conditional.scala 39:67]
        when io.mem.ar.ready : @[VME.scala 159:30]
          rstate <= UInt<2>("h02") @[VME.scala 160:16]
          skip @[VME.scala 159:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_193 = eq(UInt<2>("h02"), rstate) @[Conditional.scala 37:30]
        when _T_193 : @[Conditional.scala 39:67]
          node _T_194 = and(io.mem.r.ready, io.mem.r.valid) @[Decoupled.scala 37:37]
          node _T_195 = and(_T_194, io.mem.r.bits.last) @[VME.scala 164:29]
          when _T_195 : @[VME.scala 164:52]
            rstate <= UInt<2>("h00") @[VME.scala 165:16]
            skip @[VME.scala 164:52]
          skip @[Conditional.scala 39:67]
    reg wstate : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[VME.scala 171:23]
    reg wr_cnt : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[VME.scala 174:23]
    node _T_199 = eq(wstate, UInt<2>("h00")) @[VME.scala 176:16]
    when _T_199 : @[VME.scala 176:32]
      wr_cnt <= UInt<1>("h00") @[VME.scala 177:12]
      skip @[VME.scala 176:32]
    else : @[VME.scala 178:33]
      node _T_201 = and(io.mem.w.ready, io.mem.w.valid) @[Decoupled.scala 37:37]
      when _T_201 : @[VME.scala 178:33]
        node _T_203 = add(wr_cnt, UInt<1>("h01")) @[VME.scala 179:22]
        node _T_204 = tail(_T_203, 1) @[VME.scala 179:22]
        wr_cnt <= _T_204 @[VME.scala 179:12]
        skip @[VME.scala 178:33]
    node _T_205 = eq(UInt<2>("h00"), wstate) @[Conditional.scala 37:30]
    when _T_205 : @[Conditional.scala 40:58]
      when io.vme.wr[0].cmd.valid : @[VME.scala 184:37]
        wstate <= UInt<2>("h01") @[VME.scala 185:16]
        skip @[VME.scala 184:37]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_206 = eq(UInt<2>("h01"), wstate) @[Conditional.scala 37:30]
      when _T_206 : @[Conditional.scala 39:67]
        when io.mem.aw.ready : @[VME.scala 189:30]
          wstate <= UInt<2>("h02") @[VME.scala 190:16]
          skip @[VME.scala 189:30]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_207 = eq(UInt<2>("h02"), wstate) @[Conditional.scala 37:30]
        when _T_207 : @[Conditional.scala 39:67]
          node _T_208 = and(io.vme.wr[0].data.valid, io.mem.w.ready) @[VME.scala 194:37]
          node _T_209 = eq(wr_cnt, io.vme.wr[0].cmd.bits.len) @[VME.scala 194:65]
          node _T_210 = and(_T_208, _T_209) @[VME.scala 194:55]
          when _T_210 : @[VME.scala 194:96]
            wstate <= UInt<2>("h03") @[VME.scala 195:16]
            skip @[VME.scala 194:96]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_211 = eq(UInt<2>("h03"), wstate) @[Conditional.scala 37:30]
          when _T_211 : @[Conditional.scala 39:67]
            when io.mem.b.valid : @[VME.scala 199:29]
              wstate <= UInt<2>("h00") @[VME.scala 200:16]
              skip @[VME.scala 199:29]
            skip @[Conditional.scala 39:67]
    reg rd_len : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[VME.scala 207:23]
    reg wr_len : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[VME.scala 208:23]
    reg rd_addr : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VME.scala 209:24]
    reg wr_addr : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[VME.scala 210:24]
    node _T_220 = and(rd_arb.io.out.ready, rd_arb.io.out.valid) @[Decoupled.scala 37:37]
    when _T_220 : @[VME.scala 212:31]
      rd_len <= rd_arb.io.out.bits.len @[VME.scala 213:12]
      rd_addr <= rd_arb.io.out.bits.addr @[VME.scala 214:13]
      skip @[VME.scala 212:31]
    node _T_221 = and(io.vme.wr[0].cmd.ready, io.vme.wr[0].cmd.valid) @[Decoupled.scala 37:37]
    when _T_221 : @[VME.scala 217:34]
      wr_len <= io.vme.wr[0].cmd.bits.len @[VME.scala 218:12]
      wr_addr <= io.vme.wr[0].cmd.bits.addr @[VME.scala 219:13]
      skip @[VME.scala 217:34]
    node _T_222 = eq(rstate, UInt<2>("h00")) @[VME.scala 223:33]
    rd_arb.io.out.ready <= _T_222 @[VME.scala 223:23]
    node _T_224 = eq(rd_arb_chosen, UInt<1>("h00")) @[VME.scala 227:46]
    node _T_225 = and(_T_224, io.mem.r.valid) @[VME.scala 227:59]
    io.vme.rd[0].data.valid <= _T_225 @[VME.scala 227:29]
    io.vme.rd[0].data.bits <= io.mem.r.bits.data @[VME.scala 228:28]
    node _T_226 = eq(wstate, UInt<2>("h00")) @[VME.scala 231:36]
    io.vme.wr[0].cmd.ready <= _T_226 @[VME.scala 231:26]
    node _T_227 = and(io.mem.b.ready, io.mem.b.valid) @[Decoupled.scala 37:37]
    io.vme.wr[0].ack <= _T_227 @[VME.scala 232:20]
    node _T_228 = eq(wstate, UInt<2>("h02")) @[VME.scala 233:37]
    node _T_229 = and(_T_228, io.mem.w.ready) @[VME.scala 233:52]
    io.vme.wr[0].data.ready <= _T_229 @[VME.scala 233:27]
    node _T_230 = eq(wstate, UInt<2>("h01")) @[VME.scala 236:29]
    io.mem.aw.valid <= _T_230 @[VME.scala 236:19]
    io.mem.aw.bits.addr <= wr_addr @[VME.scala 237:23]
    io.mem.aw.bits.len <= wr_len @[VME.scala 238:22]
    node _T_231 = eq(wstate, UInt<2>("h02")) @[VME.scala 240:28]
    node _T_232 = and(_T_231, io.vme.wr[0].data.valid) @[VME.scala 240:43]
    io.mem.w.valid <= _T_232 @[VME.scala 240:18]
    io.mem.w.bits.data <= io.vme.wr[0].data.bits @[VME.scala 241:22]
    node _T_233 = eq(wr_cnt, io.vme.wr[0].cmd.bits.len) @[VME.scala 242:32]
    io.mem.w.bits.last <= _T_233 @[VME.scala 242:22]
    node _T_234 = eq(wstate, UInt<2>("h03")) @[VME.scala 244:28]
    io.mem.b.ready <= _T_234 @[VME.scala 244:18]
    node _T_235 = eq(rstate, UInt<2>("h01")) @[VME.scala 246:29]
    io.mem.ar.valid <= _T_235 @[VME.scala 246:19]
    io.mem.ar.bits.addr <= rd_addr @[VME.scala 247:23]
    io.mem.ar.bits.len <= rd_len @[VME.scala 248:22]
    node _T_236 = eq(rstate, UInt<2>("h02")) @[VME.scala 250:28]
    node _T_247 = and(_T_236, io.vme.rd[UInt<1>("h00")].data.ready) @[VME.scala 250:42]
    io.mem.r.ready <= _T_247 @[VME.scala 250:18]
    io.mem.aw.bits.user <= UInt<1>("h01") @[AXI.scala 195:18]
    io.mem.aw.bits.burst <= UInt<1>("h01") @[AXI.scala 196:19]
    io.mem.aw.bits.lock <= UInt<1>("h00") @[AXI.scala 197:18]
    io.mem.aw.bits.cache <= UInt<4>("h0f") @[AXI.scala 198:19]
    io.mem.aw.bits.prot <= UInt<3>("h04") @[AXI.scala 199:18]
    io.mem.aw.bits.qos <= UInt<1>("h00") @[AXI.scala 200:17]
    io.mem.aw.bits.region <= UInt<1>("h00") @[AXI.scala 201:20]
    io.mem.aw.bits.size <= UInt<2>("h03") @[AXI.scala 202:18]
    io.mem.aw.bits.id <= UInt<1>("h00") @[AXI.scala 203:16]
    io.mem.w.bits.id <= UInt<1>("h00") @[AXI.scala 204:15]
    io.mem.w.bits.user <= UInt<1>("h01") @[AXI.scala 205:17]
    node _T_263 = mux(UInt<1>("h01"), UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    io.mem.w.bits.strb <= _T_263 @[AXI.scala 206:17]
    io.mem.ar.bits.user <= UInt<1>("h01") @[AXI.scala 207:18]
    io.mem.ar.bits.burst <= UInt<1>("h01") @[AXI.scala 208:19]
    io.mem.ar.bits.lock <= UInt<1>("h00") @[AXI.scala 209:18]
    io.mem.ar.bits.cache <= UInt<4>("h0f") @[AXI.scala 210:19]
    io.mem.ar.bits.prot <= UInt<3>("h04") @[AXI.scala 211:18]
    io.mem.ar.bits.qos <= UInt<1>("h00") @[AXI.scala 212:17]
    io.mem.ar.bits.region <= UInt<1>("h00") @[AXI.scala 213:20]
    io.mem.ar.bits.size <= UInt<2>("h03") @[AXI.scala 214:18]
    io.mem.ar.bits.id <= UInt<1>("h00") @[AXI.scala 215:16]
    
  module Queue : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip enq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, deq : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<64>}, count : UInt<6>}
    
    cmem ram : UInt<64>[40] @[Decoupled.scala 215:24]
    reg value : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Counter.scala 26:33]
    reg value_1 : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Counter.scala 26:33]
    reg maybe_full : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Decoupled.scala 218:35]
    node _T_41 = eq(value, value_1) @[Decoupled.scala 220:41]
    node _T_43 = eq(maybe_full, UInt<1>("h00")) @[Decoupled.scala 221:36]
    node empty = and(_T_41, _T_43) @[Decoupled.scala 221:33]
    node _T_44 = and(_T_41, maybe_full) @[Decoupled.scala 222:32]
    node _T_45 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 37:37]
    wire do_enq : UInt<1>
    do_enq <= _T_45
    node _T_47 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 37:37]
    wire do_deq : UInt<1>
    do_deq <= _T_47
    when do_enq : @[Decoupled.scala 226:17]
      infer mport _T_49 = ram[value], clock @[Decoupled.scala 227:8]
      _T_49 <= io.enq.bits @[Decoupled.scala 227:24]
      node wrap = eq(value, UInt<6>("h027")) @[Counter.scala 34:24]
      node _T_52 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_53 = tail(_T_52, 1) @[Counter.scala 35:22]
      value <= _T_53 @[Counter.scala 35:13]
      when wrap : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Decoupled.scala 226:17]
    when do_deq : @[Decoupled.scala 230:17]
      node wrap_1 = eq(value_1, UInt<6>("h027")) @[Counter.scala 34:24]
      node _T_57 = add(value_1, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_58 = tail(_T_57, 1) @[Counter.scala 35:22]
      value_1 <= _T_58 @[Counter.scala 35:13]
      when wrap_1 : @[Counter.scala 37:21]
        value_1 <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Decoupled.scala 230:17]
    node _T_60 = neq(do_enq, do_deq) @[Decoupled.scala 233:16]
    when _T_60 : @[Decoupled.scala 233:28]
      maybe_full <= do_enq @[Decoupled.scala 234:16]
      skip @[Decoupled.scala 233:28]
    node _T_62 = eq(empty, UInt<1>("h00")) @[Decoupled.scala 237:19]
    io.deq.valid <= _T_62 @[Decoupled.scala 237:16]
    node _T_64 = eq(_T_44, UInt<1>("h00")) @[Decoupled.scala 238:19]
    io.enq.ready <= _T_64 @[Decoupled.scala 238:16]
    infer mport _T_65 = ram[value_1], clock @[Decoupled.scala 239:21]
    io.deq.bits <= _T_65 @[Decoupled.scala 239:15]
    node _T_66 = sub(value, value_1) @[Decoupled.scala 254:40]
    node _T_67 = asUInt(_T_66) @[Decoupled.scala 254:40]
    node _T_68 = tail(_T_67, 1) @[Decoupled.scala 254:40]
    node _T_71 = mux(maybe_full, UInt<6>("h028"), UInt<1>("h00")) @[Decoupled.scala 259:24]
    node _T_72 = gt(value_1, value) @[Decoupled.scala 261:39]
    node _T_74 = add(UInt<6>("h028"), _T_68) @[Decoupled.scala 262:38]
    node _T_75 = tail(_T_74, 1) @[Decoupled.scala 262:38]
    node _T_76 = mux(_T_72, _T_75, _T_68) @[Decoupled.scala 261:24]
    node _T_77 = mux(_T_41, _T_71, _T_76) @[Decoupled.scala 258:20]
    io.count <= _T_77 @[Decoupled.scala 258:14]
    
  module VTAShell : 
    input clock : Clock
    input reset : UInt<1>
    output io : {host : {flip aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<16>}}, flip w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, strb : UInt<4>}}, b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>}}, flip ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<16>}}, r : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<32>, resp : UInt<2>}}}, mem : {aw : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, id : UInt<1>, user : UInt<5>, len : UInt<4>, size : UInt<3>, burst : UInt<2>, lock : UInt<2>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>}}, w : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, strb : UInt<8>, last : UInt<1>, id : UInt<1>, user : UInt<5>}}, flip b : {flip ready : UInt<1>, valid : UInt<1>, bits : {resp : UInt<2>, id : UInt<1>, user : UInt<5>}}, ar : {flip ready : UInt<1>, valid : UInt<1>, bits : {addr : UInt<32>, id : UInt<1>, user : UInt<5>, len : UInt<4>, size : UInt<3>, burst : UInt<2>, lock : UInt<2>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>, region : UInt<4>}}, flip r : {flip ready : UInt<1>, valid : UInt<1>, bits : {data : UInt<64>, resp : UInt<2>, last : UInt<1>, id : UInt<1>, user : UInt<5>}}}}
    
    inst vcr of VCR @[VTAShell.scala 85:19]
    vcr.clock <= clock
    vcr.reset <= reset
    inst vmem of VME @[VTAShell.scala 86:20]
    vmem.clock <= clock
    vmem.reset <= reset
    inst buffer of Queue @[VTAShell.scala 87:22]
    buffer.clock <= clock
    buffer.reset <= reset
    reg Rstate : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[VTAShell.scala 90:23]
    reg Wstate : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[VTAShell.scala 91:23]
    reg value : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Counter.scala 26:33]
    node _T_99 = neq(Rstate, UInt<2>("h00")) @[VTAShell.scala 95:16]
    when _T_99 : @[VTAShell.scala 95:27]
      node _T_101 = eq(value, UInt<8>("h0c7")) @[Counter.scala 34:24]
      node _T_103 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_104 = tail(_T_103, 1) @[Counter.scala 35:22]
      value <= _T_104 @[Counter.scala 35:13]
      when _T_101 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[VTAShell.scala 95:27]
    vcr.io.vcr.ecnt[UInt<1>("h00")].bits <= value @[VTAShell.scala 100:29]
    node _T_109 = eq(UInt<2>("h00"), Rstate) @[Conditional.scala 37:30]
    when _T_109 : @[Conditional.scala 40:58]
      when vcr.io.vcr.launch : @[VTAShell.scala 105:32]
        value <= UInt<1>("h00") @[VTAShell.scala 106:27]
        Rstate <= UInt<2>("h01") @[VTAShell.scala 107:16]
        skip @[VTAShell.scala 105:32]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_111 = eq(UInt<2>("h01"), Rstate) @[Conditional.scala 37:30]
      when _T_111 : @[Conditional.scala 39:67]
        node _T_112 = and(vmem.io.vme.rd[0].cmd.ready, vmem.io.vme.rd[0].cmd.valid) @[Decoupled.scala 37:37]
        when _T_112 : @[VTAShell.scala 111:43]
          Rstate <= UInt<2>("h02") @[VTAShell.scala 112:16]
          skip @[VTAShell.scala 111:43]
        skip @[Conditional.scala 39:67]
    node _T_113 = eq(UInt<2>("h00"), Wstate) @[Conditional.scala 37:30]
    when _T_113 : @[Conditional.scala 40:58]
      when vcr.io.vcr.launch : @[VTAShell.scala 119:32]
        Wstate <= UInt<2>("h01") @[VTAShell.scala 120:16]
        skip @[VTAShell.scala 119:32]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_114 = eq(UInt<2>("h01"), Wstate) @[Conditional.scala 37:30]
      when _T_114 : @[Conditional.scala 39:67]
        node _T_115 = and(vmem.io.vme.wr[0].cmd.ready, vmem.io.vme.wr[0].cmd.valid) @[Decoupled.scala 37:37]
        when _T_115 : @[VTAShell.scala 124:43]
          Wstate <= UInt<2>("h02") @[VTAShell.scala 125:16]
          skip @[VTAShell.scala 124:43]
        skip @[Conditional.scala 39:67]
    vmem.io.vme.rd[0].cmd.bits.addr <= vcr.io.vcr.ptrs[0] @[VTAShell.scala 130:35]
    vmem.io.vme.rd[0].cmd.bits.len <= vcr.io.vcr.vals[1] @[VTAShell.scala 131:34]
    vmem.io.vme.rd[0].cmd.valid <= UInt<1>("h00") @[VTAShell.scala 132:31]
    vmem.io.vme.wr[0].cmd.bits.addr <= vcr.io.vcr.ptrs[2] @[VTAShell.scala 134:35]
    vmem.io.vme.wr[0].cmd.bits.len <= vcr.io.vcr.vals[1] @[VTAShell.scala 135:34]
    vmem.io.vme.wr[0].cmd.valid <= UInt<1>("h00") @[VTAShell.scala 136:31]
    node _T_118 = eq(Rstate, UInt<2>("h01")) @[VTAShell.scala 138:15]
    when _T_118 : @[VTAShell.scala 138:25]
      vmem.io.vme.rd[0].cmd.valid <= UInt<1>("h01") @[VTAShell.scala 139:33]
      skip @[VTAShell.scala 138:25]
    node _T_120 = eq(Wstate, UInt<2>("h01")) @[VTAShell.scala 142:15]
    when _T_120 : @[VTAShell.scala 142:25]
      vmem.io.vme.wr[0].cmd.valid <= UInt<1>("h01") @[VTAShell.scala 143:33]
      skip @[VTAShell.scala 142:25]
    node _T_122 = eq(Wstate, UInt<2>("h02")) @[VTAShell.scala 147:21]
    node last = and(_T_122, vmem.io.vme.wr[0].ack) @[VTAShell.scala 147:31]
    vcr.io.vcr.finish <= last @[VTAShell.scala 148:21]
    vcr.io.vcr.ecnt[0].valid <= last @[VTAShell.scala 149:28]
    when vmem.io.vme.wr[0].ack : @[VTAShell.scala 151:31]
      Rstate <= UInt<2>("h00") @[VTAShell.scala 152:12]
      Wstate <= UInt<2>("h00") @[VTAShell.scala 153:12]
      skip @[VTAShell.scala 151:31]
    buffer.io.enq.bits <= vmem.io.vme.rd[0].data.bits @[VTAShell.scala 157:17]
    buffer.io.enq.valid <= vmem.io.vme.rd[0].data.valid @[VTAShell.scala 157:17]
    vmem.io.vme.rd[0].data.ready <= buffer.io.enq.ready @[VTAShell.scala 157:17]
    node _T_123 = add(vmem.io.vme.rd[0].data.bits, vcr.io.vcr.vals[0]) @[VTAShell.scala 158:53]
    node _T_124 = tail(_T_123, 1) @[VTAShell.scala 158:53]
    buffer.io.enq.bits <= _T_124 @[VTAShell.scala 158:22]
    vmem.io.vme.wr[0].data.bits <= buffer.io.deq.bits @[VTAShell.scala 159:26]
    vmem.io.vme.wr[0].data.valid <= buffer.io.deq.valid @[VTAShell.scala 159:26]
    buffer.io.deq.ready <= vmem.io.vme.wr[0].data.ready @[VTAShell.scala 159:26]
    vmem.io.mem.r.bits.user <= io.mem.r.bits.user @[VTAShell.scala 161:10]
    vmem.io.mem.r.bits.id <= io.mem.r.bits.id @[VTAShell.scala 161:10]
    vmem.io.mem.r.bits.last <= io.mem.r.bits.last @[VTAShell.scala 161:10]
    vmem.io.mem.r.bits.resp <= io.mem.r.bits.resp @[VTAShell.scala 161:10]
    vmem.io.mem.r.bits.data <= io.mem.r.bits.data @[VTAShell.scala 161:10]
    vmem.io.mem.r.valid <= io.mem.r.valid @[VTAShell.scala 161:10]
    io.mem.r.ready <= vmem.io.mem.r.ready @[VTAShell.scala 161:10]
    io.mem.ar.bits.region <= vmem.io.mem.ar.bits.region @[VTAShell.scala 161:10]
    io.mem.ar.bits.qos <= vmem.io.mem.ar.bits.qos @[VTAShell.scala 161:10]
    io.mem.ar.bits.prot <= vmem.io.mem.ar.bits.prot @[VTAShell.scala 161:10]
    io.mem.ar.bits.cache <= vmem.io.mem.ar.bits.cache @[VTAShell.scala 161:10]
    io.mem.ar.bits.lock <= vmem.io.mem.ar.bits.lock @[VTAShell.scala 161:10]
    io.mem.ar.bits.burst <= vmem.io.mem.ar.bits.burst @[VTAShell.scala 161:10]
    io.mem.ar.bits.size <= vmem.io.mem.ar.bits.size @[VTAShell.scala 161:10]
    io.mem.ar.bits.len <= vmem.io.mem.ar.bits.len @[VTAShell.scala 161:10]
    io.mem.ar.bits.user <= vmem.io.mem.ar.bits.user @[VTAShell.scala 161:10]
    io.mem.ar.bits.id <= vmem.io.mem.ar.bits.id @[VTAShell.scala 161:10]
    io.mem.ar.bits.addr <= vmem.io.mem.ar.bits.addr @[VTAShell.scala 161:10]
    io.mem.ar.valid <= vmem.io.mem.ar.valid @[VTAShell.scala 161:10]
    vmem.io.mem.ar.ready <= io.mem.ar.ready @[VTAShell.scala 161:10]
    vmem.io.mem.b.bits.user <= io.mem.b.bits.user @[VTAShell.scala 161:10]
    vmem.io.mem.b.bits.id <= io.mem.b.bits.id @[VTAShell.scala 161:10]
    vmem.io.mem.b.bits.resp <= io.mem.b.bits.resp @[VTAShell.scala 161:10]
    vmem.io.mem.b.valid <= io.mem.b.valid @[VTAShell.scala 161:10]
    io.mem.b.ready <= vmem.io.mem.b.ready @[VTAShell.scala 161:10]
    io.mem.w.bits.user <= vmem.io.mem.w.bits.user @[VTAShell.scala 161:10]
    io.mem.w.bits.id <= vmem.io.mem.w.bits.id @[VTAShell.scala 161:10]
    io.mem.w.bits.last <= vmem.io.mem.w.bits.last @[VTAShell.scala 161:10]
    io.mem.w.bits.strb <= vmem.io.mem.w.bits.strb @[VTAShell.scala 161:10]
    io.mem.w.bits.data <= vmem.io.mem.w.bits.data @[VTAShell.scala 161:10]
    io.mem.w.valid <= vmem.io.mem.w.valid @[VTAShell.scala 161:10]
    vmem.io.mem.w.ready <= io.mem.w.ready @[VTAShell.scala 161:10]
    io.mem.aw.bits.region <= vmem.io.mem.aw.bits.region @[VTAShell.scala 161:10]
    io.mem.aw.bits.qos <= vmem.io.mem.aw.bits.qos @[VTAShell.scala 161:10]
    io.mem.aw.bits.prot <= vmem.io.mem.aw.bits.prot @[VTAShell.scala 161:10]
    io.mem.aw.bits.cache <= vmem.io.mem.aw.bits.cache @[VTAShell.scala 161:10]
    io.mem.aw.bits.lock <= vmem.io.mem.aw.bits.lock @[VTAShell.scala 161:10]
    io.mem.aw.bits.burst <= vmem.io.mem.aw.bits.burst @[VTAShell.scala 161:10]
    io.mem.aw.bits.size <= vmem.io.mem.aw.bits.size @[VTAShell.scala 161:10]
    io.mem.aw.bits.len <= vmem.io.mem.aw.bits.len @[VTAShell.scala 161:10]
    io.mem.aw.bits.user <= vmem.io.mem.aw.bits.user @[VTAShell.scala 161:10]
    io.mem.aw.bits.id <= vmem.io.mem.aw.bits.id @[VTAShell.scala 161:10]
    io.mem.aw.bits.addr <= vmem.io.mem.aw.bits.addr @[VTAShell.scala 161:10]
    io.mem.aw.valid <= vmem.io.mem.aw.valid @[VTAShell.scala 161:10]
    vmem.io.mem.aw.ready <= io.mem.aw.ready @[VTAShell.scala 161:10]
    io.host.r.bits.resp <= vcr.io.host.r.bits.resp @[VTAShell.scala 162:15]
    io.host.r.bits.data <= vcr.io.host.r.bits.data @[VTAShell.scala 162:15]
    io.host.r.valid <= vcr.io.host.r.valid @[VTAShell.scala 162:15]
    vcr.io.host.r.ready <= io.host.r.ready @[VTAShell.scala 162:15]
    vcr.io.host.ar.bits.addr <= io.host.ar.bits.addr @[VTAShell.scala 162:15]
    vcr.io.host.ar.valid <= io.host.ar.valid @[VTAShell.scala 162:15]
    io.host.ar.ready <= vcr.io.host.ar.ready @[VTAShell.scala 162:15]
    io.host.b.bits.resp <= vcr.io.host.b.bits.resp @[VTAShell.scala 162:15]
    io.host.b.valid <= vcr.io.host.b.valid @[VTAShell.scala 162:15]
    vcr.io.host.b.ready <= io.host.b.ready @[VTAShell.scala 162:15]
    vcr.io.host.w.bits.strb <= io.host.w.bits.strb @[VTAShell.scala 162:15]
    vcr.io.host.w.bits.data <= io.host.w.bits.data @[VTAShell.scala 162:15]
    vcr.io.host.w.valid <= io.host.w.valid @[VTAShell.scala 162:15]
    io.host.w.ready <= vcr.io.host.w.ready @[VTAShell.scala 162:15]
    vcr.io.host.aw.bits.addr <= io.host.aw.bits.addr @[VTAShell.scala 162:15]
    vcr.io.host.aw.valid <= io.host.aw.valid @[VTAShell.scala 162:15]
    io.host.aw.ready <= vcr.io.host.aw.ready @[VTAShell.scala 162:15]
    
  module TestAccel2 : 
    input clock : Clock
    input reset : UInt<1>
    input sim_clock : Clock
    output sim_wait : UInt<1>
    
    inst sim_shell of AXISimShell @[VCRAccel.scala 54:25]
    sim_shell.clock <= clock
    sim_shell.reset <= reset
    inst vta_shell of VTAShell @[VCRAccel.scala 55:25]
    vta_shell.clock <= clock
    vta_shell.reset <= reset
    sim_shell.mem.r.bits.user is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.r.bits.id is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.r.bits.last is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.r.bits.resp is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.r.bits.data is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.r.valid is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.r.ready is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.region is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.qos is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.prot is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.cache is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.lock is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.burst is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.size is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.len is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.user is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.id is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.bits.addr is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.valid is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.ar.ready is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.b.bits.user is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.b.bits.id is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.b.bits.resp is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.b.valid is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.b.ready is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.w.bits.user is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.w.bits.id is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.w.bits.last is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.w.bits.strb is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.w.bits.data is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.w.valid is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.w.ready is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.region is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.qos is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.prot is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.cache is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.lock is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.burst is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.size is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.len is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.user is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.id is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.bits.addr is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.valid is invalid @[VCRAccel.scala 56:17]
    sim_shell.mem.aw.ready is invalid @[VCRAccel.scala 56:17]
    sim_shell.host.r.bits.resp is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.r.bits.data is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.r.valid is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.r.ready is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.ar.bits.addr is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.ar.valid is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.ar.ready is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.b.bits.resp is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.b.valid is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.b.ready is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.w.bits.strb is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.w.bits.data is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.w.valid is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.w.ready is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.aw.bits.addr is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.aw.valid is invalid @[VCRAccel.scala 57:18]
    sim_shell.host.aw.ready is invalid @[VCRAccel.scala 57:18]
    sim_shell.sim_clock <= sim_clock @[VCRAccel.scala 58:23]
    sim_wait <= sim_shell.sim_wait @[VCRAccel.scala 59:12]
    vta_shell.io.mem.r.bits.user <= sim_shell.mem.r.bits.user @[VCRAccel.scala 60:17]
    vta_shell.io.mem.r.bits.id <= sim_shell.mem.r.bits.id @[VCRAccel.scala 60:17]
    vta_shell.io.mem.r.bits.last <= sim_shell.mem.r.bits.last @[VCRAccel.scala 60:17]
    vta_shell.io.mem.r.bits.resp <= sim_shell.mem.r.bits.resp @[VCRAccel.scala 60:17]
    vta_shell.io.mem.r.bits.data <= sim_shell.mem.r.bits.data @[VCRAccel.scala 60:17]
    vta_shell.io.mem.r.valid <= sim_shell.mem.r.valid @[VCRAccel.scala 60:17]
    sim_shell.mem.r.ready <= vta_shell.io.mem.r.ready @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.region <= vta_shell.io.mem.ar.bits.region @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.qos <= vta_shell.io.mem.ar.bits.qos @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.prot <= vta_shell.io.mem.ar.bits.prot @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.cache <= vta_shell.io.mem.ar.bits.cache @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.lock <= vta_shell.io.mem.ar.bits.lock @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.burst <= vta_shell.io.mem.ar.bits.burst @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.size <= vta_shell.io.mem.ar.bits.size @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.len <= vta_shell.io.mem.ar.bits.len @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.user <= vta_shell.io.mem.ar.bits.user @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.id <= vta_shell.io.mem.ar.bits.id @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.bits.addr <= vta_shell.io.mem.ar.bits.addr @[VCRAccel.scala 60:17]
    sim_shell.mem.ar.valid <= vta_shell.io.mem.ar.valid @[VCRAccel.scala 60:17]
    vta_shell.io.mem.ar.ready <= sim_shell.mem.ar.ready @[VCRAccel.scala 60:17]
    vta_shell.io.mem.b.bits.user <= sim_shell.mem.b.bits.user @[VCRAccel.scala 60:17]
    vta_shell.io.mem.b.bits.id <= sim_shell.mem.b.bits.id @[VCRAccel.scala 60:17]
    vta_shell.io.mem.b.bits.resp <= sim_shell.mem.b.bits.resp @[VCRAccel.scala 60:17]
    vta_shell.io.mem.b.valid <= sim_shell.mem.b.valid @[VCRAccel.scala 60:17]
    sim_shell.mem.b.ready <= vta_shell.io.mem.b.ready @[VCRAccel.scala 60:17]
    sim_shell.mem.w.bits.user <= vta_shell.io.mem.w.bits.user @[VCRAccel.scala 60:17]
    sim_shell.mem.w.bits.id <= vta_shell.io.mem.w.bits.id @[VCRAccel.scala 60:17]
    sim_shell.mem.w.bits.last <= vta_shell.io.mem.w.bits.last @[VCRAccel.scala 60:17]
    sim_shell.mem.w.bits.strb <= vta_shell.io.mem.w.bits.strb @[VCRAccel.scala 60:17]
    sim_shell.mem.w.bits.data <= vta_shell.io.mem.w.bits.data @[VCRAccel.scala 60:17]
    sim_shell.mem.w.valid <= vta_shell.io.mem.w.valid @[VCRAccel.scala 60:17]
    vta_shell.io.mem.w.ready <= sim_shell.mem.w.ready @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.region <= vta_shell.io.mem.aw.bits.region @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.qos <= vta_shell.io.mem.aw.bits.qos @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.prot <= vta_shell.io.mem.aw.bits.prot @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.cache <= vta_shell.io.mem.aw.bits.cache @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.lock <= vta_shell.io.mem.aw.bits.lock @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.burst <= vta_shell.io.mem.aw.bits.burst @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.size <= vta_shell.io.mem.aw.bits.size @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.len <= vta_shell.io.mem.aw.bits.len @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.user <= vta_shell.io.mem.aw.bits.user @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.id <= vta_shell.io.mem.aw.bits.id @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.bits.addr <= vta_shell.io.mem.aw.bits.addr @[VCRAccel.scala 60:17]
    sim_shell.mem.aw.valid <= vta_shell.io.mem.aw.valid @[VCRAccel.scala 60:17]
    vta_shell.io.mem.aw.ready <= sim_shell.mem.aw.ready @[VCRAccel.scala 60:17]
    sim_shell.host.r.bits.resp <= vta_shell.io.host.r.bits.resp @[VCRAccel.scala 61:20]
    sim_shell.host.r.bits.data <= vta_shell.io.host.r.bits.data @[VCRAccel.scala 61:20]
    sim_shell.host.r.valid <= vta_shell.io.host.r.valid @[VCRAccel.scala 61:20]
    vta_shell.io.host.r.ready <= sim_shell.host.r.ready @[VCRAccel.scala 61:20]
    vta_shell.io.host.ar.bits.addr <= sim_shell.host.ar.bits.addr @[VCRAccel.scala 61:20]
    vta_shell.io.host.ar.valid <= sim_shell.host.ar.valid @[VCRAccel.scala 61:20]
    sim_shell.host.ar.ready <= vta_shell.io.host.ar.ready @[VCRAccel.scala 61:20]
    sim_shell.host.b.bits.resp <= vta_shell.io.host.b.bits.resp @[VCRAccel.scala 61:20]
    sim_shell.host.b.valid <= vta_shell.io.host.b.valid @[VCRAccel.scala 61:20]
    vta_shell.io.host.b.ready <= sim_shell.host.b.ready @[VCRAccel.scala 61:20]
    vta_shell.io.host.w.bits.strb <= sim_shell.host.w.bits.strb @[VCRAccel.scala 61:20]
    vta_shell.io.host.w.bits.data <= sim_shell.host.w.bits.data @[VCRAccel.scala 61:20]
    vta_shell.io.host.w.valid <= sim_shell.host.w.valid @[VCRAccel.scala 61:20]
    sim_shell.host.w.ready <= vta_shell.io.host.w.ready @[VCRAccel.scala 61:20]
    vta_shell.io.host.aw.bits.addr <= sim_shell.host.aw.bits.addr @[VCRAccel.scala 61:20]
    vta_shell.io.host.aw.valid <= sim_shell.host.aw.valid @[VCRAccel.scala 61:20]
    sim_shell.host.aw.ready <= vta_shell.io.host.aw.ready @[VCRAccel.scala 61:20]
    
